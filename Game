#include "stdio.h"
#include "stdlib.h"
#include "time.h"

//размеры поля 
#define N 100 
#define M 100
//еда
	//количество еды ( в процентах )
	#define AMT_FOOD	10
	//количество хп еды
	#define HP_FOOD		10
	#define RATE_FOOD	1
	//частота появления ( в ходах )
	#define TIME_FOOD	10
	//прибавка к хп
	#define INC_HP		10

//голуби
	//количество голубей ( в процентах )
	#define AMT_DOVE	10
	//количество расходуемой еды за ход
	#define RATE_DOVE	1
	//начальное количество хп
	#define HP_DOVE		30

//ястребы
	//количество ястребов
	#define AMT_HAWK	10
	//количество расходуемой еды за ход
	#define RATE_HAWK	1
	//начальное количество хп
	#define HP_HAWK		30

typedef struct
{
	int //x,
		//y,
		type,
		hp,
		step;
}unit;

typedef struct
{
	int dove,
		hawk;
}result_move;

void set_food(unit **arr)	//еда
{
	int i, j;
	int t = time(NULL);

	int amt_food = ((N*M) / 100) * AMT_FOOD;

	for (int c = 0; c < amt_food; c++)
	{
		i = rand(t - c) % N;
		j = rand(t + c) % M;

		arr[i][j].hp = HP_FOOD;
		arr[i][j].type = 3;
	}
}
int set_dove(unit **arr)
{
	int i, j, c, 
		c1, 
		c2 = 0;

	int t = time(NULL);
	int amt_dove = ((N*M) / 100) * AMT_DOVE;

	for (c = 0; c < amt_dove; c++)
	{
		c1 = 0;
		while (c1 == 0)
		{
			i = rand(t - c - c2) % N;
			j = rand(t + c + c2) % M;
			if (arr[i][j].type == 0)
			{
				arr[i][j].hp = HP_DOVE;
				arr[i][j].type = 1;
				arr[i][j].step = 0;
				c1++;
				c2++;
			}
		}
	}
	return amt_dove;
}
int set_hawk(unit **arr)
{
	int i, j, c,
		c1,
		c2 = 0;

	int t = time(NULL);
	int amt_hawk = ((N*M) / 100) * AMT_HAWK;

	for (c = 0; c < amt_hawk; c++)
	{
		c1 = 0;
		while (c1 == 0)
		{
			i = rand(t - c) % N;
			j = rand(t + c) % M;
			if (arr[i][j].type == 0)
			{
				arr[i][j].hp = HP_HAWK;
				arr[i][j].type = 2;
				arr[i][j].step = 0;
				c1++;
				c2++;
			}
		}
	}
	return amt_hawk;
}
result_move move_unit(unit **arr, int i, int j)
{
	int x = i, y = j,
		r, c;
	result_move rmove = {0,0};
	srand(time(NULL));
	r = rand() % 6;

	for (c = 0; c < 5; c++)
	{
		if (r == 0) { //up
			if (x == 0)
				x = N - 1;
			else
				x++;
		}
		if (r == 3) {//down
			if (x == (N - 1))
				x = 0;
			else
				x--;
		}
		if (r == 1) {//right up
			if (y % 2 == 0)
			{
				if (x == 0)
					x = N;
				else
					x--;
				if (y == (M - 1))
					y = 0;
				else
					y++;
			}
			else
			{
				if (y == (M - 1))
					y = 0;
				else
					y++;
			}
		}
		if (r == 2)//right down
		{
			if (y % 2 == 0)
			{
				if (y == (M - 1))
					y = 0;
				else
					y++;
			}
			else
			{
				if (x == (N - 1))
					x = 0;
				else
					x++;
				if (y == (M - 1))
					y = 0;
				else
					y++;
			}
		}
		if (r == 4)//left down
		{
			if (y % 2 == 0)
			{
				if (y == 0)
					y = M - 1;
				else
					y--;
			}
			else
			{
				if (x == (N - 1))
					x = 0;
				else
					x++;
				if (y == 0)
					y = (M - 1);
				else
					y--;
			}
		}
		if (r == 5)//left up
		{
			if (y % 2 == 0)
			{
				if (x == 0)
					x = (N - 1);
				else
					x--;
				if (y == 0)
					y = (M - 1);
				else
					y--;
			}
		}

		arr[i][j].hp -= 1;
		if (arr[i][j].hp == 0)
		{
			if (arr[i][j].type == 1)
				rmove.dove = 1;
			else
				rmove.hawk = 0;

			arr[i][j].hp = 0;
			arr[i][j].step = 0;
			arr[i][j].type = 0;
			return rmove;
		}


		if (arr[i][j].type == 1)
		{
			if (arr[x][y].type == 0)
			{
				arr[x][y] = arr[i][j];
				arr[i][j].hp = 0;
				arr[i][j].step = 0;
				arr[i][j].type = 0;
				return rmove;
			}
			else if (arr[x][y].type == 3)
			{
				arr[i][j].hp += INC_HP;
				arr[x][y] = arr[i][j];
				arr[i][j].hp = 0;
				arr[i][j].step = 0;
				arr[i][j].type = 0;
				return rmove;
			}
			else
			{
				if (r == 5)
					r = 0;
				else
					r++;
			}
		}
		else
		{
			if (arr[x][y].type == 0)
			{
				arr[x][y] = arr[i][j];
				arr[i][j].hp = 0;
				arr[i][j].step = 0;
				arr[i][j].type = 0;
				return rmove;
			}
			else if (arr[x][y].type == 3)
			{
				arr[i][j].hp += INC_HP;
				arr[x][y] = arr[i][j];
				arr[i][j].hp = 0;
				arr[i][j].step = 0;
				arr[i][j].type = 0;
				return rmove;
			}
			else
			{
				if (arr[x][y].type == 1)
				{
					arr[i][j].hp += INC_HP;
					arr[x][y] = arr[i][j];
					arr[i][j].hp = 0;
					arr[i][j].step = 0;
					arr[i][j].type = 0;
					rmove.dove = 1;
					return rmove;
				}
				else
				{
					if (arr[i][j].hp > arr[x][y].hp)
					{
						arr[i][j].hp = (arr[i][j].hp - arr[x][y].hp) + INC_HP;
						arr[x][y] = arr[i][j];
						arr[i][j].hp = 0;
						arr[i][j].step = 0;
						arr[i][j].type = 0;
						rmove.hawk = 1;
						return rmove;
					}
					else if (arr[i][j].hp < arr[x][y].hp)
					{
						arr[x][y].hp = (arr[x][y].hp - arr[i][j].hp) + INC_HP;
						arr[i][j].hp = 0;
						arr[i][j].step = 0;
						arr[i][j].type = 0;
						rmove.hawk = 1;
						return rmove;
					}
					else
					{
						arr[i][j].hp = 0;
						arr[i][j].step = 0;
						arr[i][j].type = 0;

						arr[x][y].hp = 0;
						arr[x][y].step = 0;
						arr[x][y].type = 0;
						rmove.hawk = 2;
						return rmove;
					}
				}
			}
		}

	}

}


int main()
{
	int i, j, z,
		c_hawk = 0,
		c_dove = 0, 
		c_food = 0,
		n_step = 1;

	result_move rmove = { 0 , 0 };

	//выделение памяти для поля и заполнение его нулями
	unit **p_field;
	p_field = (unit**)malloc(N * sizeof(unit));
	for (i = 0; i < N; i++)
	{
		p_field[i] = (unit*)malloc(M * sizeof(unit));
		for (j = 0; j < M; j++)
		{
				p_field[i][j].hp = 0;
				p_field[i][j].step = 0;
				p_field[i][j].type = 0;
		}
	}
	//растановка юнитов
	set_food(p_field);
	c_dove = set_dove(p_field);
	c_hawk = set_hawk(p_field);

	while (c_dove != 0 && c_hawk != 0)
	{
		for (i = 0; i < N; i++)
		{
			for (j = 0; j < M; j++)
			{
				if (p_field[i][j].type == 0)	//пустая ячейка
					continue;
				if (p_field[i][j].type == 3)	//еда
				{
					p_field[i][j].hp -= RATE_FOOD;
					continue;
				}
				if (p_field[i][j].type == 1)	//голубь
				{
					p_field[i][j].step = n_step;
					rmove = move_unit(p_field, i, j);
				}
				if (p_field[i][j].type == 2)	//ястреб
				{
					p_field[i][j].step = n_step;
					rmove = move_unit(p_field, i, j);
				}
			}
		}
		printf("Step - %d\tFood - %d\tDove - %d\tHawk - %d\n", n_step, c_food, c_dove, c_hawk);
		c_dove -= rmove.dove;
		c_hawk -= rmove.hawk;
		n_step++;

	}
}
